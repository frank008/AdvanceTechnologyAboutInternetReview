mybatis-plus   代码自动生成  entity  mapper service  controller

1.pom.xml
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.yinse</groupId>
    <artifactId>yinseproject</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.4.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <modules>
        <module>dataCenter</module>
        <module>common</module>
    </modules>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <mybatis.plus.version>3.2.0</mybatis.plus.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.aliyun.oss</groupId>
            <artifactId>aliyun-sdk-oss</artifactId>
            <version>3.10.2</version>
            <exclusions>
                <exclusion>
                    <artifactId>aliyun-java-sdk-core</artifactId>
                    <groupId>com.aliyun</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <!-- Spring系列 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <!-- 打包war [2] 移除自带内置tomcat -->
            <exclusions>
                <exclusion>
                    <artifactId>spring-boot-starter-tomcat</artifactId>
                    <groupId>org.springframework.boot</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>javafx.base</artifactId>
                    <groupId>org.openjfx</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-aop</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-actuator</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
        <!-- redis连接池 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>

        <!-- 任务调度 -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
        </dependency>

        <!-- MyBatis增强插件 -->
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-boot-starter</artifactId>
            <version>${mybatis.plus.version}</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>mybatis-plus-generator</artifactId>
            <version>${mybatis.plus.version}</version>
        </dependency>
        <dependency>
            <groupId>com.baomidou</groupId>
            <artifactId>dynamic-datasource-spring-boot-starter</artifactId>
            <version>2.5.7</version>
        </dependency>

        <!-- freemaker模板引擎，用于定义代码生成模板 -->
        <dependency>
            <groupId>org.freemarker</groupId>
            <artifactId>freemarker</artifactId>
            <version>2.3.28</version>
        </dependency>

        <!-- 控制台 SQL日志打印插件 -->
        <dependency>
            <groupId>p6spy</groupId>
            <artifactId>p6spy</artifactId>
            <version>3.8.1</version>
        </dependency>

        <!-- mysql驱动 -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <!--            <scope>runtime</scope>-->
            <version>8.0.18</version>
        </dependency>

        <!-- IP定位插件 -->
        <dependency>
            <groupId>org.lionsoul</groupId>
            <artifactId>ip2region</artifactId>
            <version>1.7.2</version>
        </dependency>

        <!-- commons工具 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.6</version>
        </dependency>

        <!-- google guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>27.0-jre</version>
        </dependency>

        <!-- Excel导入导出插件 -->
        <dependency>
            <groupId>com.wuwenze</groupId>
            <artifactId>ExcelKit</artifactId>
            <version>2.0.72</version>
            <exclusions>
                <exclusion>
                    <artifactId>guava</artifactId>
                    <groupId>com.google.guava</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>commons-beanutils</artifactId>
                    <groupId>commons-beanutils</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!-- 验证码生成插件 -->
        <dependency>
            <groupId>com.github.whvcse</groupId>
            <artifactId>easy-captcha</artifactId>
            <version>1.6.2</version>
        </dependency>

        <!-- xss过滤 -->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>1.12.1</version>
        </dependency>

        <dependency>
            <groupId>xml-apis</groupId>
            <artifactId>xml-apis</artifactId>
            <version>1.4.01</version>
        </dependency>

        <!-- Shiro -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>1.6.0</version>
        </dependency>
        <!-- JWT -->
        <dependency>
            <groupId>com.auth0</groupId>
            <artifactId>java-jwt</artifactId>
            <version>3.10.3</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.72</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on -->
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>1.65.01</version>
        </dependency>
        <!--七牛云-->
        <dependency>
            <groupId>com.qiniu</groupId>
            <artifactId>qiniu-java-sdk</artifactId>
            <version>[7.2.0, 7.2.99]</version>
        </dependency>
        <dependency>
            <groupId>com.aliyun</groupId>
            <artifactId>aliyun-java-sdk-core</artifactId>
            <version>4.4.2</version>
        </dependency>
        <dependency>
            <groupId>com.aliyun</groupId>
            <artifactId>aliyun-java-sdk-dysmsapi</artifactId>
            <version>1.1.0</version>
        </dependency>

        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.5</version>
        </dependency>
        <!-- ES 搜索引擎-->
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <version>5.6.8</version>
            <exclusions>
                <exclusion>
                    <artifactId>commons-logging</artifactId>
                    <groupId>commons-logging</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>elasticsearch</artifactId>
                    <groupId>org.elasticsearch</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>5.6.8</version>
            <exclusions>
                <exclusion>
                    <artifactId>HdrHistogram</artifactId>
                    <groupId>org.hdrhistogram</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.github.wxpay/wxpay-sdk -->
        <dependency>
            <groupId>com.github.wxpay</groupId>
            <artifactId>wxpay-sdk</artifactId>
            <version>0.0.3</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.google.zxing/core -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.3.3</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.3.3</version>
        </dependency>

        <dependency>
            <groupId>org.apache.rocketmq</groupId>
            <artifactId>rocketmq-client</artifactId>
            <version>4.8.0</version>
            <exclusions>
                <exclusion>
                    <artifactId>fastjson</artifactId>
                    <groupId>com.alibaba</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>commons-beanutils</artifactId>
                    <groupId>commons-beanutils</groupId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- 以下是 qq wx 联合登陆需要的相关依赖工具 commons-io， commons-lang3，httpclient，fastjson-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.3.2</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
        </dependency>

        <!-- 打包war [3] 添加依赖 -->
      <!--  <dependency>
        <groupId>javax.servlet</groupId>
        <artifactId>javax.servlet-api</artifactId>
        <scope>provided</scope>
        </dependency>-->

        <!-- apache 工具类 -->
        <!--<dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>1.11</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.4</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
            <version>1.3.2</version>
        </dependency>-->
    </dependencies>
</project>
==========================
创建controller.java.vm 文件  src\main\resources\templates\controller.java.vm

package ${package.Controller};

import com.baomidou.mybatisplus.annotation.TableField;
import com.baomidou.mybatisplus.annotation.TableId;
import com.alibaba.fastjson.JSON;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.conditions.update.UpdateWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import com.yinse.configcenter.entity.AthResponseEnhance;
import com.yinse.configcenter.entity.AthRequest;
import com.yinse.configcenter.entity.QueryWrapperUtils;

import io.swagger.annotations.*;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.apache.commons.beanutils.BeanUtils;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.lang.*;

import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.transaction.annotation.Transactional;
/**
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@Api(tags = {"${table.comment}接口"})
@RestController
#else
@Controller
#end
@RequestMapping("/yinseApi")
#if(${superControllerClass})
@Transactional(rollbackFor = Exception.class,propagation= Propagation.REQUIRED)
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end
private final Logger logger=LoggerFactory.getLogger(${table.controllerName}.class);

@Autowired
public ${table.serviceName} i${entity}Service;


//获取数据库字段名
private static final HashMap<String, Object> dataFieldMap=new HashMap<>();
static {
        Field[]fields=${entity}.class.getDeclaredFields();
        for(Field field:fields){
        field.setAccessible(true);
        String keyName=field.getName();
        try{
            String annName=null;
            if(keyName.toLowerCase().contains("id")){
                try{
                    annName=field.getDeclaredAnnotation(TableId.class).value();
                }catch(Exception e){
                    annName=field.getDeclaredAnnotation(TableField.class).value();
                }
                }else{
                    annName=field.getDeclaredAnnotation(TableField.class).value();
                }
                 dataFieldMap.put(keyName,annName);
        }catch(Exception e){
                }
        }
}

/**
 * 分页查询数据
 *
 * @param  ${table.comment}  分页信息
 * @param AthRequest<${entity}> queryParams 查询条件
 * @return
 */
@ApiOperation(value = "${table.comment} - 查询列表")
@ResponseBody
@PostMapping("/query${entity}PageList")
public AthResponseEnhance<${entity}> get${entity}List(@RequestBody AthRequest<${entity}> queryParams){
        try{
            ${entity} queryParam${entity} = queryParams.getData();
            long currentPage = queryParams.getCurrentPage();
            long pageSize = queryParams.getPageSize();
            //查询条件
            QueryWrapper queryWrapper${entity}=new QueryWrapperUtils<${entity}>().getQueryWrapper(dataFieldMap,queryParam${entity});

            //创建翻页条件
            Page<${entity}> page=new Page<>(currentPage,pageSize);
            Page<${entity}> page${entity}=i${entity}Service.page(page,queryWrapper${entity});

            AthResponseEnhance athResponse=AthResponseEnhance.ok();
            athResponse.setMessage("查询列表成功!");
            athResponse.setPageSize(page${entity}.getSize());
            athResponse.setCurrentPage(page${entity}.getCurrent());
            athResponse.setCount(page${entity}.getTotal());
            athResponse.setData(page${entity}.getRecords());
            return athResponse;
        }catch(Exception e){
            logger.error("查询列表异常："+e.toString());
            return AthResponseEnhance.error().setMessage("查询列表失败！");
        }
}

/**
 * ${table.comment} 更新数据
 * @param AthRequest<${entity}> queryParams 更新数据
 * @return
 */
@ApiOperation(value = "${table.comment} - 更新数据" ,notes = "必输字段: id")

@PostMapping("/update${entity}")
public AthResponseEnhance<${entity}> update${entity}(@RequestBody AthRequest<${entity}> queryParams){
        try{
            ${entity} queryParam${entity} = queryParams.getData();
            QueryWrapper queryWrapper${entity}=new QueryWrapperUtils<${entity}>().getUpdateDeleteQueryWrapper(dataFieldMap,queryParam${entity});
            boolean update =i${entity}Service.update(queryParam${entity},queryWrapper${entity});
            if(update){
                return AthResponseEnhance.ok().setMessage("更新数据成功!");
            }
        }catch(Exception e){
            logger.error("更新数据异常："+e.toString());
        }
        return AthResponseEnhance.error().setMessage("更新数据失败！");
}

/**
 * ${table.comment} 新增数据
 * @param AthRequest<${entity}> queryParams 新增数据
 * @return
 */
@ApiOperation(value = "${table.comment} - 新增数据")
@PostMapping("/add${entity}")
public AthResponseEnhance<${entity}>  add${entity}(@RequestBody AthRequest<${entity}> queryParams){
        try{
            ${entity} queryParam${entity} = queryParams.getData();
            boolean save=i${entity}Service.save(queryParam${entity});
            if(save){
                return AthResponseEnhance.ok().setMessage("数据保存成功!");
            }
        }catch(Exception e){
            logger.error("数据保存异常："+e.toString());
        }
        return AthResponseEnhance.error().setMessage("数据保存失败！");
 }

/**
 * ${table.comment} 删除数据
 * @param AthRequest<${entity}> queryParams 删除数据
 * @return
 */
@ApiOperation(value = "${table.comment} - 删除数据",notes = "必输字段: id")
@PostMapping("/delete${entity}")
public AthResponseEnhance<${entity}> delete${entity}(@RequestBody AthRequest<${entity}> queryParams){
    try {
        ${entity} queryParam${entity} = queryParams.getData();
        QueryWrapper queryWrapper${entity}=new QueryWrapperUtils<${entity}>().getUpdateDeleteQueryWrapper(dataFieldMap,queryParam${entity});
        boolean remove=i${entity}Service.remove(queryWrapper${entity});
        if(remove){
            return AthResponseEnhance.ok().setMessage("数据删除成功!");
        }
        } catch (Exception e) {
        logger.error("数据删除失败!");
        e.printStackTrace();
    }
    return AthResponseEnhance.error().setMessage("数据删除失败!");
}

}
==================================================
application.yml 文件配置

server:
  port: 7012
  tomcat:
    uri-encoding: utf-8
    min-spare-threads: 100
    max-threads: 1000
    accept-count: 700
    max-connections: 10000

  connection-timeout: 60000
  servlet:
    context-path: /yinsechat
  #默认情况下，仅会压缩2048字节以上的内容
  compression:
    enabled: true
    min-response-size: 256
    mime-types:
    - text/html
    - application/javascript
    - text/css
    - application/octet-stream
    - application/json

#包含其他 yml配置文件
spring:
  profiles:
    active: dev

  thymeleaf:
    cache: false
    prefix: classpath:/templates/
    suffix: .html
    mode: HTML5
    encoding: UTF-8
    servlet:
      content-type: text/html
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8

  aop:
    proxy-target-class: true
  resources:
    static-locations: classpath:static/,file:static/

  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java #重启目录
      exclude: WEB-INF/**

  freemarker:
    cache: false    #页面不加载缓存，修改即时生效

  servlet:
    multipart:
      max-file-size: 1000MB
      max-request-size: 1000MB

# 开启驼峰命名 javaBean 与表字段 自动映射
mybatis:
  configuration:
    map-underscore-to-camel-case: true


mybatis-plus:
  type-aliases-package: com.yinse.datacenter.*.mapper
  mapper-locations: classpath:mapper/*.xml
  configuration:
    jdbc-type-for-null: null
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志
  global-config:
    banner: false
    db-config:
      select-strategy: not_empty

logging:
  level:
    com:
      baomidou:
        mybatisplus:
          core:
            metadata:
              TableInfoHelper: error
 
#AccessToken过期时间-5分钟-5*60(秒为单位)
accessTokenExpireTime: 300
#RefreshToken过期时间-30分钟-30*60(秒为单位)
refreshTokenExpireTime: 1800
#Shiro缓存过期时间-5分钟-5*60(秒为单位)(一般设置与AccessToken过期时间一致)
shiroCacheExpireTime: 300
 


=======================
启动类
package com.yinse;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.transaction.annotation.EnableTransactionManagement;

@EnableAsync
@SpringBootApplication
@EnableTransactionManagement
@MapperScan(basePackages = "com.yinse.*.*.mapper")
public class MainApplication {

    public static void main(String[] args) {
        new SpringApplicationBuilder(MainApplication.class)
                .web(WebApplicationType.SERVLET)
                .run(args);

    }
}
==================================
代码生成类
package com.yinse.datacenter.demo;
import com.baomidou.mybatisplus.core.exceptions.MybatisPlusException;
import com.baomidou.mybatisplus.core.toolkit.StringPool;
import com.baomidou.mybatisplus.core.toolkit.StringUtils;
import com.baomidou.mybatisplus.generator.AutoGenerator;
import com.baomidou.mybatisplus.generator.InjectionConfig;
import com.baomidou.mybatisplus.generator.config.*;
import com.baomidou.mybatisplus.generator.config.po.TableInfo;
import com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/*
1.Mybatis-plus 自动生成 entity  mapper  *Mapper.xml  service  serviceImpl 等文件

2.请不要随便修改 代码生成器

3. application.yml 中开启驼峰命名 javaBean与表字段自动映射,不需要手动配置javaBean与表之间的关系
        mybatis:
           configuration:
                map-underscore-to-camel-case: true

4.每次只允许输入一张表名, 一次只生成一张数据库表的配置

5.直接运行 run  CodeGenerator.java  然后输入一张表名 即可生成表的配置文件

6.多表关联查询 需要在 *Mapper.xml 文件里,自定义SQL语句

7.修改 数据库连接 密码 用户名 数据库名 , 在 CodeGenerator.java类中请修改 DBUtil类的 getDataSourceConfig方法配置

8.如需生成数据库所有表的配置, 请联系韦明发操作.
*/

public class CodeGenerator {


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Mybatis自动工程-请输入表名: ");
        if(scanner.hasNext()) {
            String flag = scanner.nextLine().trim();
            createTableService(flag);
        }

        /* createAlltables();*/

    }

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
    public  static  void createAlltables(){
        //查询所有的数据库表
        String allTables = getAllTables();
        //String[] tablelist = allTables.split(",");
        createTableService(allTables);
        /*for (String item : tablelist) {
            createTableService(item);
        }*/

    }

    /**
     * <p>
     * 读取控制台内容
     * </p>
     */
    public static String scanner(String tip) {
        Scanner scanner = new Scanner(System.in);
        StringBuilder help = new StringBuilder();
        help.append("请输入" + tip + "：");
        System.out.println(help.toString());
        if (scanner.hasNext()) {
            String ipt = scanner.next();
            if (StringUtils.isNotBlank(ipt)) {
                return ipt;
            }
        }
        throw new MybatisPlusException("请输入正确的" + tip + "！");
    }

    public static   void createTableService(String tableName) {
        // 代码生成器
        AutoGenerator mpg = new AutoGenerator();

        // 全局配置
        GlobalConfig gc = new GlobalConfig();
        String projectPath = "dataCenter";
        gc.setOutputDir(projectPath + "/src/main/java");
        gc.setAuthor("frank");
        gc.setSwagger2(true);
        gc.setOpen(false);
        gc.setBaseResultMap(true);
        gc.setBaseColumnList(true);
        //gc.setControllerName("%Controller");
        gc.setFileOverride(true);

        mpg.setGlobalConfig(gc);

        DataSourceConfig dsc = DBUtil.getDataSourceConfig();
        mpg.setDataSource(dsc);

        // 包配置
        PackageConfig pc = new PackageConfig();
        //pc.setModuleName(scanner("模块名"));
        pc.setParent(null);
        // 这个地址是生成的 javaBean配置文件的包路径
        pc.setEntity("com.yinse.datacenter.demo.entity");
        //生成 controller 类包名
        pc.setController("com.yinse.datacenter.demo.controller");
        //生成 mapper 类包名
        pc.setMapper("com.yinse.datacenter.demo.mapper");
        //生成service 包名
        pc.setService("com.yinse.datacenter.demo.service");
        //生成serviceImpl实现类包
        pc.setServiceImpl("com.yinse.datacenter.demo.service.impl");
        mpg.setPackageInfo(pc);

        // 自定义配置
        InjectionConfig cfg = new InjectionConfig() {
            @Override
            public void initMap() {
                // to do nothing
            }
        };

        // 如果模板引擎是 freemarker
        //String templatePath = "/templates/mapper.xml.ftl";
        // 如果模板引擎是 velocity
        String templatePath = "/templates/mapper.xml.vm";

        // 自定义输出配置
        List<FileOutConfig> focList = new ArrayList<>();
        // 自定义配置会被优先输出
        focList.add(new FileOutConfig(templatePath) {
            @Override
            public String outputFile(TableInfo tableInfo) {
                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！！
                return projectPath + "/src/main/resources/demo/mapper" + pc.getModuleName()
                        + "/" + tableInfo.getEntityName() + "Mapper" + StringPool.DOT_XML;
            }
        });
        /*
        cfg.setFileCreate(new IFileCreate() {
            @Override
            public boolean isCreate(ConfigBuilder configBuilder, FileType fileType, String filePath) {
                // 判断自定义文件夹是否需要创建
                checkDir("调用默认方法创建的目录，自定义目录用");
                if (fileType == FileType.MAPPER) {
                    // 已经生成 mapper 文件判断存在，不想重新生成返回 false
                    return !new File(filePath).exists();
                }
                // 允许生成模板文件
                return true;
            }
        });
        */
        cfg.setFileOutConfigList(focList);
        mpg.setCfg(cfg);

        // 配置模板
        TemplateConfig templateConfig = new TemplateConfig();

        // 配置自定义输出模板
        //指定自定义模板路径，注意不要带上.ftl/.vm, 会根据使用的模板引擎自动识别
        // templateConfig.setEntity("templates/entity2.java");
        // templateConfig.setService();
        // templateConfig.setController();

        templateConfig.setXml(null);
        templateConfig.setController("/templates/controller.java.vm");


        // 策略配置
        StrategyConfig strategy = new StrategyConfig();
        strategy.setNaming(NamingStrategy.underline_to_camel);
        strategy.setColumnNaming(NamingStrategy.underline_to_camel);
        //strategy.setSuperEntityClass("你自己的父类实体,没有就不用设置!");
        strategy.setEntityLombokModel(true);
        strategy.setRestControllerStyle(true);
        //开启entity 表字段注解
        strategy.setEntityTableFieldAnnotationEnable(true);

        //为防止出错 每次只能 操作一张表
        strategy.setInclude(tableName.split(","));

        strategy.setControllerMappingHyphenStyle(true);
        strategy.setTablePrefix(pc.getModuleName() + "_");
        mpg.setStrategy(strategy);
        mpg.setTemplate(templateConfig);
        //mpg.setTemplateEngine(new FreemarkerTemplateEngine());
        mpg.execute();
    }

    public static String getAllTables(){
        String tableList="";

        System.out.println("开始查询数据库表,请稍等!");
        DBUtil dbUtil = new DBUtil();
        Connection conn = dbUtil.getConnection();
        PreparedStatement pstmt = null;
        String sql="select table_name from information_schema.tables where table_schema='yinse_im_database'";
        try {
            pstmt = conn.prepareStatement(sql);
            ResultSet rs = pstmt.executeQuery();
            System.out.println("查询数据库表完成!");


            while (rs.next()){
                String tableName = rs.getString(1);
                if(!tableName.equalsIgnoreCase("PDMAN_DB_VERSION")){
                    tableList=tableList+tableName+",";
                }
            }


        } catch (SQLException throwables) {

        }finally {
            dbUtil.closeJDBC(null,pstmt,conn);
        }
        int index = tableList.lastIndexOf(",");
        String substring = tableList.substring(0,index);
        System.out.println("所有数据库表:"+substring);
        return substring;
    }
}

class DBUtil {

    private String user = "";
    private String password = "";
    private String url = "";

    public DBUtil(){
        DataSourceConfig dsc = getDataSourceConfig();
        this.url=dsc.getUrl();
        this.user=dsc.getUsername();
        this.password=dsc.getPassword();
    }

    static {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }

    public Connection getConnection() {
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(this.url, this.user, this.password);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return conn;
    }

    public  void closeJDBC(ResultSet rs, Statement stmt, Connection conn) {
        if (rs != null) {
            try {
                rs.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (stmt != null) {
            try {
                stmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (conn != null) {
            try {
                conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }

    public static DataSourceConfig getDataSourceConfig(){
        DataSourceConfig dsc = new DataSourceConfig();
        dsc.setUrl("jdbc:mysql:");
        // dsc.setSchemaName("public");
        dsc.setDriverName("com.mysql.cj.jdbc.Driver");
        dsc.setUsername("");
        dsc.setPassword("");

        return dsc;
    }
}
================================
